package blog.anirbanm.keyboard.model.am;


import blog.anirbanm.keyboard.model.am.common.KeyboardModule;
import blog.anirbanm.keyboard.model.vo.EmployeesVOImpl;
import blog.anirbanm.keyboard.model.vo.EmployeesVORowImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 08 10:32:19 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KeyboardModuleImpl extends ApplicationModuleImpl implements KeyboardModule {
    
    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(KeyboardModuleImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public KeyboardModuleImpl() {
    }
    
    public void keyboardAction(final String keyboardActionKey) {
        LOGGER.info("Keyboard action = {0}", new Object[] { keyboardActionKey });
        final EmployeesVOImpl empView = getEmployeesVO1();
        final EmployeesVORowImpl employee = (EmployeesVORowImpl) empView.getCurrentRow();
        if (("PasteEmployee").equals(keyboardActionKey)) {
            pasteEmployee(employee);
        } else if (("RemoveEmployee").equals(keyboardActionKey)) {
            removeEmployee(employee);
        } else if (("RemoveAndSaveEmployee").equals(keyboardActionKey)) {
            removeEmployee(employee);
            saveEmployeeChange();
        } else if (("SaveEmployeeChange").equals(keyboardActionKey)) {
            saveEmployeeChange();
        } else if (("UndoEmployeeChange").equals(keyboardActionKey)) {
            undoEmployeeChange();
        }
    }
    
    private void pasteEmployee(final Row employee) {
        LOGGER.info("Copied employee row {0}", new Object[] { employee });
        // insert logic for copying a record into a new row
    }
    
    private void removeEmployee(final Row employee) {
        LOGGER.info("Removed employee row {0}", new Object[] { employee });
        // insert logic for deleting a record
    }
    
    private void saveEmployeeChange() {
        LOGGER.info("Saved employee record");
        // insert logic for commit
    }
    
    private void undoEmployeeChange() {
        LOGGER.info("Rolled back employee changes");
        // insert logic for rollback
    }

    /**
     * Container's getter for EmployeesVO1.
     * @return EmployeesVO1
     */
    public EmployeesVOImpl getEmployeesVO1() {
        return (EmployeesVOImpl) findViewObject("EmployeesVO1");
    }
}

